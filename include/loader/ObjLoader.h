/**
 * @file ObjLoader.h
 * @author Ryan Purse
 * @date 23/02/2022
 */


#pragma once

#include <functional>
#include "MeshComponents.h"

struct ObjVertex
{
    glm::vec3 position;
    glm::vec2 uv;
    glm::vec3 normal;
};

typedef std::function<void(const ObjVertex&)> GenVertexSignature;
typedef std::function<uint32_t()> GetSizeSignature;

/**
 * @brief Creates a shared mesh with the specified vertex type.
 * @tparam VertexSpecification - The vertex spec that you want.
 * @param path - The path to the .obj file
 * @returns A shared mesh that can be used by the program.
 */
template<typename VertexSpecification>
SharedMesh loadObj(std::string_view path)
{
    if (typeid(VertexSpecification) == typeid(UvVertex))
    {
        Mesh<UvVertex> mesh = loadObjUvVertex(path);
        return std::make_shared<Mesh<UvVertex>>(mesh);
    }
    if (typeid(VertexSpecification) == typeid(BasicVertex))
    {
        Mesh<BasicVertex> mesh = loadObjBasicVertex(path);
        return std::make_shared<Mesh<BasicVertex>>(mesh);
    }
    else
        debug::log("Unknown vertex type for .obj file: " + std::string(typeid(VertexSpecification).name()),
                   debug::severity::Warning);
    return { };
}

/**
 * @brief Generates a mesh based on an .obj file.
 * @param path - The path to the .obj file that you want to load.
 * @param genVertexDelegate - How you want to deal with vertex information from the file.
 * @param getSizeDelegate - Helper function to tell the function the number of vertices.
 * @returns The indices generated by the file.
 */
[[nodiscard]] std::vector<uint32_t>
generateObj(std::string_view path, const GenVertexSignature &genVertexDelegate, const GetSizeSignature &getSizeDelegate);

/**
 * @brief Loads an obj file with vertex type Uv Vertex.
 * @param path - The path to the .obj file that you want to load.
 * @returns A mesh with type Uv Vertex.
 */
Mesh<UvVertex> loadObjUvVertex(std::string_view path);

/**
 * @brief Loads an obj file with vertex type Basic Vertex.
 * @param path - The path to the .obj file that you want to load.
 * @returns A mesh with type Basic Vertex.
 */
Mesh<BasicVertex> loadObjBasicVertex(std::string_view path);
